{
  "gameSaved": "Game saved.",
  "gameLoaded": "Game loaded.",
  "loadFailed": "Failed to load game.",
  "endedTurn": "{{name}} ended their turn.",
  "startedTurn": "{{name}} started their turn.",
  "noLongerIncapacitated": "{{name}} is no longer incapacitated.",
  "allHeroesDead": "All the heroes fell in combat. But worry not, you can try again.",
  "failedToReset": "Failed to reset level. Please reload.",
  "allConditionsFulfilled": "All win conditions have been fulfilled.",
  "clearedDungeon": "You have cleared {{name}}.",
  "moveToNext": "Press 'Next' to move on to the next level: {{name}}.",
  "playingCampaign": "Playing {{name}}.",
  "gameInitialized": "Game initialized.",
  "initLogActions": "Each character has 2 actions. Move, Attack, Search or Pick Lock.",
  "initLogMoves": "Each character can move 3 steps per action.",
  "initLogMoveFinished": "If another action is performed before moving 3 steps, the move is finished and both actions are consumed.",
  "initLogUnfair": "The rules of this game are harsh and unfair.",
  "youHaveReached": "You have reached {{name}}.",
  "takeDamage": {
    "armourUseless": "{{actor}}'a armour was useless against {{weapon}}.",
    "shieldUseless": "{{actor}}'a shield was useless against {{weapon}}.",
    "usedEffect": "{{actor}} used the effect of {{item}} when attacking.",
    "reRoll": "{{actor}} missed but got another chance.",
    "attackedWith": "{{actor}} attacked {{target}} with {{weapon}} for {{damage}}.",
    "killed": "{{actor}} killed {{target}}."
  },
  "events": {
    "sunStone": "{{monster}} was killed by the Sun Stone.",
    "foreSight": "You sense the object is close to ({{x}},{{y}}).",
    "magicStormRestored": "The magic storm calmed down",
    "landslideRestored": "The collapsed corridor cleared up.",
    "blindedRestored": "You light your torches again.",
    "elementalWeaponRestored": "The elemental magic died off.",
    "weakenedRestored": "Your strength returns to you."
  },
  "heroAction": {
    "pickUp": "{{hero}} picked up {{item}}.",
    "drop": "{{hero}} dropped {{item}}.",
    "equipped": "{{hero}} dropped {{item}}.",
    "found": "{{hero}} found {{item}}.",
    "brokeLock": "{{hero}} broke the lock on the door.",
    "noActions": "{{hero}} has no actions left.",
    "illegalMove": "{{hero}} could not make that move.",
    "blinded": "{{hero}} is blinded and may not search.",
    "pickedLock": "{{hero}} managed to pick the lock.",
    "failedToPickLock": "{{hero}} failed to pick the lock.",
    "openedDoor": "{{hero}} opened a door.",
    "reads": "{{hero}} reads: {{note}}",
    "leveledUp": "{{hero}} leveled up to {{level}}.",
    "notNearFriend": "{{hero}} could not use {{weapon}} near a friend.",
    "locked": "Door is locked.",
    "monsterOutOfRange": "Monster is out of range.",
    "walkedByMonster": "{{hero}} walked by a monster and lost the momentum.",
    "searchBonus": "{{hero}} used the effect of {{item}} when searching.",
    "searchFoundNothing": "{{hero}} searched but found nothing.",
    "pitfall": "{{hero}} fell into a pit and is incapacitated for one turn.",
    "foundDoor": "{{hero}} searched ({{result}}) and found a hidden door.",
    "foundTrapInDoor": "{{hero}} searched ({{result}}) and found a trap in a door.",
    "foundSecret": "{{hero}} searched ({{result}}) and found {{secret}}."

  },
  "item": {
    "cannotUse": "{{item}} cannot be used at this moment.",
    "noTarget": "No target was selected.",
    "noUsesLeft": "{{item}} has no uses left.",
    "magicHerbs": "{{user}} used {{item}} on {{target}}, restoring {{addedHealth}} HP.",
    "consumed": "{{item}} has been consumed.",
    "potionOfSpeed": "{{user}} used {{item}}, adding {{actions}} actions."
  },
  "monsterAction": {
    "noMonsterAct": "No monsters can act.",
    "acted": "{{monster}} acted.",
    "moveDespiteTarget": "{{monster}} decided to move despite seeing a target.",
    "movedTowards": "{{monster}} moved towards {{hero}} ({{x}},{{y}}).",
    "couldNotMove": "{{monster}} could not move.",
    "fireAttackDeflected": "{{monster}} attempted a fire attack, but {{target}}s {{armour}} deflected it."
  },
  "debug": {
    "hasNecklaceOfLight": "Heroes had necklace of light? {{hasNecklaceOfLight}}"
  }
}